// ==============================================================
// Generated by Vitis HLS v2023.1.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module myproject_linear_ap_fixed_16_10_5_3_0_ap_fixed_16_6_5_3_0_linear_config9_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_ce,
        ap_idle,
        ap_ready,
        p_read,
        layer9_out,
        layer9_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
input   ap_ce;
output   ap_idle;
output   ap_ready;
input  [11:0] p_read;
output  [15:0] layer9_out;
output   layer9_out_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] layer9_out;
reg layer9_out_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_block_state1;
wire   [15:0] shl_ln_fu_33_p3;
reg   [15:0] layer9_out_preg;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 layer9_out_preg = 16'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                layer9_out_preg[4] <= 1'b0;
        layer9_out_preg[5] <= 1'b0;
        layer9_out_preg[6] <= 1'b0;
        layer9_out_preg[7] <= 1'b0;
        layer9_out_preg[8] <= 1'b0;
        layer9_out_preg[9] <= 1'b0;
        layer9_out_preg[10] <= 1'b0;
        layer9_out_preg[11] <= 1'b0;
        layer9_out_preg[12] <= 1'b0;
        layer9_out_preg[13] <= 1'b0;
        layer9_out_preg[14] <= 1'b0;
        layer9_out_preg[15] <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
                        layer9_out_preg[15 : 4] <= shl_ln_fu_33_p3[15 : 4];
        end
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) | (1'b0 == ap_ce) | (ap_done_reg == 1'b1))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        layer9_out = shl_ln_fu_33_p3;
    end else begin
        layer9_out = layer9_out_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1) & (1'b1 == ap_ce))) begin
        layer9_out_ap_vld = 1'b1;
    end else begin
        layer9_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign shl_ln_fu_33_p3 = {{p_read}, {4'd0}};

always @ (posedge ap_clk) begin
    layer9_out_preg[3:0] <= 4'b0000;
end

endmodule //myproject_linear_ap_fixed_16_10_5_3_0_ap_fixed_16_6_5_3_0_linear_config9_s
